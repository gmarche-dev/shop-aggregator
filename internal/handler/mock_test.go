package handler_test

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	uuid "github.com/google/uuid"
	context "context"
	mock "github.com/stretchr/testify/mock"
	model "shop-aggregator/internal/model"
	uuid "github.com/google/uuid"
)



// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

type AuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthUsecase) EXPECT() *AuthUsecase_Expecter {
	return &AuthUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: _a0, _a1, _a2
func (_m *AuthUsecase) Login(_a0 context.Context, _a1 string, _a2 string) (string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *AuthUsecase_Expecter) Login(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AuthUsecase_Login_Call {
	return &AuthUsecase_Login_Call{Call: _e.mock.On("Login", _a0, _a1, _a2)}
}

func (_c *AuthUsecase_Login_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *AuthUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthUsecase_Login_Call) Return(_a0 string, _a1 error) *AuthUsecase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUsecase_Login_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *AuthUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: _a0, _a1
func (_m *AuthUsecase) Logout(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthUsecase_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthUsecase_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *AuthUsecase_Expecter) Logout(_a0 interface{}, _a1 interface{}) *AuthUsecase_Logout_Call {
	return &AuthUsecase_Logout_Call{Call: _e.mock.On("Logout", _a0, _a1)}
}

func (_c *AuthUsecase_Logout_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *AuthUsecase_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AuthUsecase_Logout_Call) Return(_a0 error) *AuthUsecase_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthUsecase_Logout_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *AuthUsecase_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
// Code generated by mockery v2.42.2. DO NOT EDIT.



// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

type UserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *UserUsecase) EXPECT() *UserUsecase_Expecter {
	return &UserUsecase_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateUser provides a mock function with given fields: ctx, m
func (_m *UserUsecase) CreateOrUpdateUser(ctx context.Context, m *model.User) error {
	ret := _m.Called(ctx, m)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUsecase_CreateOrUpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateUser'
type UserUsecase_CreateOrUpdateUser_Call struct {
	*mock.Call
}

// CreateOrUpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - m *model.User
func (_e *UserUsecase_Expecter) CreateOrUpdateUser(ctx interface{}, m interface{}) *UserUsecase_CreateOrUpdateUser_Call {
	return &UserUsecase_CreateOrUpdateUser_Call{Call: _e.mock.On("CreateOrUpdateUser", ctx, m)}
}

func (_c *UserUsecase_CreateOrUpdateUser_Call) Run(run func(ctx context.Context, m *model.User)) *UserUsecase_CreateOrUpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *UserUsecase_CreateOrUpdateUser_Call) Return(_a0 error) *UserUsecase_CreateOrUpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserUsecase_CreateOrUpdateUser_Call) RunAndReturn(run func(context.Context, *model.User) error) *UserUsecase_CreateOrUpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserUsecase) GetUserByID(ctx context.Context, id uuid.UUID) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUsecase_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserUsecase_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UserUsecase_Expecter) GetUserByID(ctx interface{}, id interface{}) *UserUsecase_GetUserByID_Call {
	return &UserUsecase_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *UserUsecase_GetUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UserUsecase_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserUsecase_GetUserByID_Call) Return(_a0 *model.User, _a1 error) *UserUsecase_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserUsecase_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.User, error)) *UserUsecase_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmail provides a mock function with given fields: ctx, ue
func (_m *UserUsecase) UpdateEmail(ctx context.Context, ue *model.UpdateEmail) error {
	ret := _m.Called(ctx, ue)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateEmail) error); ok {
		r0 = rf(ctx, ue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUsecase_UpdateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmail'
type UserUsecase_UpdateEmail_Call struct {
	*mock.Call
}

// UpdateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - ue *model.UpdateEmail
func (_e *UserUsecase_Expecter) UpdateEmail(ctx interface{}, ue interface{}) *UserUsecase_UpdateEmail_Call {
	return &UserUsecase_UpdateEmail_Call{Call: _e.mock.On("UpdateEmail", ctx, ue)}
}

func (_c *UserUsecase_UpdateEmail_Call) Run(run func(ctx context.Context, ue *model.UpdateEmail)) *UserUsecase_UpdateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.UpdateEmail))
	})
	return _c
}

func (_c *UserUsecase_UpdateEmail_Call) Return(_a0 error) *UserUsecase_UpdateEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserUsecase_UpdateEmail_Call) RunAndReturn(run func(context.Context, *model.UpdateEmail) error) *UserUsecase_UpdateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, up
func (_m *UserUsecase) UpdatePassword(ctx context.Context, up *model.UpdatePassword) error {
	ret := _m.Called(ctx, up)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdatePassword) error); ok {
		r0 = rf(ctx, up)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUsecase_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type UserUsecase_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - up *model.UpdatePassword
func (_e *UserUsecase_Expecter) UpdatePassword(ctx interface{}, up interface{}) *UserUsecase_UpdatePassword_Call {
	return &UserUsecase_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, up)}
}

func (_c *UserUsecase_UpdatePassword_Call) Run(run func(ctx context.Context, up *model.UpdatePassword)) *UserUsecase_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.UpdatePassword))
	})
	return _c
}

func (_c *UserUsecase_UpdatePassword_Call) Return(_a0 error) *UserUsecase_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserUsecase_UpdatePassword_Call) RunAndReturn(run func(context.Context, *model.UpdatePassword) error) *UserUsecase_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
