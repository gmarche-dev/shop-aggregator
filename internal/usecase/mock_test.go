package usecase_test

import (
	context "context"
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	model "shop-aggregator/internal/model"
)

// AuthStorer is an autogenerated mock type for the AuthStorer type
type AuthStorer struct {
	mock.Mock
}

type AuthStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthStorer) EXPECT() *AuthStorer_Expecter {
	return &AuthStorer_Expecter{mock: &_m.Mock}
}

// Logout provides a mock function with given fields: _a0, _a1
func (_m *AuthStorer) Logout(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthStorer_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthStorer_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *AuthStorer_Expecter) Logout(_a0 interface{}, _a1 interface{}) *AuthStorer_Logout_Call {
	return &AuthStorer_Logout_Call{Call: _e.mock.On("Logout", _a0, _a1)}
}

func (_c *AuthStorer_Logout_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *AuthStorer_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AuthStorer_Logout_Call) Return(_a0 error) *AuthStorer_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthStorer_Logout_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *AuthStorer_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: _a0, _a1, _a2
func (_m *AuthStorer) Upsert(_a0 context.Context, _a1 uuid.UUID, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthStorer_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type AuthStorer_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
//   - _a2 string
func (_e *AuthStorer_Expecter) Upsert(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AuthStorer_Upsert_Call {
	return &AuthStorer_Upsert_Call{Call: _e.mock.On("Upsert", _a0, _a1, _a2)}
}

func (_c *AuthStorer_Upsert_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID, _a2 string)) *AuthStorer_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *AuthStorer_Upsert_Call) Return(_a0 error) *AuthStorer_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthStorer_Upsert_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *AuthStorer_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthStorer creates a new instance of AuthStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthStorer {
	mock := &AuthStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.2. DO NOT EDIT.

// AuthUserStorer is an autogenerated mock type for the AuthUserStorer type
type AuthUserStorer struct {
	mock.Mock
}

type AuthUserStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthUserStorer) EXPECT() *AuthUserStorer_Expecter {
	return &AuthUserStorer_Expecter{mock: &_m.Mock}
}

// GetUserByLogin provides a mock function with given fields: _a0, _a1
func (_m *AuthUserStorer) GetUserByLogin(_a0 context.Context, _a1 string) (*model.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUserStorer_GetUserByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLogin'
type AuthUserStorer_GetUserByLogin_Call struct {
	*mock.Call
}

// GetUserByLogin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *AuthUserStorer_Expecter) GetUserByLogin(_a0 interface{}, _a1 interface{}) *AuthUserStorer_GetUserByLogin_Call {
	return &AuthUserStorer_GetUserByLogin_Call{Call: _e.mock.On("GetUserByLogin", _a0, _a1)}
}

func (_c *AuthUserStorer_GetUserByLogin_Call) Run(run func(_a0 context.Context, _a1 string)) *AuthUserStorer_GetUserByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthUserStorer_GetUserByLogin_Call) Return(_a0 *model.User, _a1 error) *AuthUserStorer_GetUserByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUserStorer_GetUserByLogin_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *AuthUserStorer_GetUserByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthUserStorer creates a new instance of AuthUserStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUserStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUserStorer {
	mock := &AuthUserStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.2. DO NOT EDIT.

// CompanyStorer is an autogenerated mock type for the CompanyStorer type
type CompanyStorer struct {
	mock.Mock
}

type CompanyStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *CompanyStorer) EXPECT() *CompanyStorer_Expecter {
	return &CompanyStorer_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: ctx, company
func (_m *CompanyStorer) Insert(ctx context.Context, company *model.Company) error {
	ret := _m.Called(ctx, company)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Company) error); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompanyStorer_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type CompanyStorer_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - company *model.Company
func (_e *CompanyStorer_Expecter) Insert(ctx interface{}, company interface{}) *CompanyStorer_Insert_Call {
	return &CompanyStorer_Insert_Call{Call: _e.mock.On("Insert", ctx, company)}
}

func (_c *CompanyStorer_Insert_Call) Run(run func(ctx context.Context, company *model.Company)) *CompanyStorer_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Company))
	})
	return _c
}

func (_c *CompanyStorer_Insert_Call) Return(_a0 error) *CompanyStorer_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CompanyStorer_Insert_Call) RunAndReturn(run func(context.Context, *model.Company) error) *CompanyStorer_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// SelectCompanies provides a mock function with given fields: ctx, name
func (_m *CompanyStorer) SelectCompanies(ctx context.Context, name string) ([]*model.Company, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for SelectCompanies")
	}

	var r0 []*model.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Company, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Company); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompanyStorer_SelectCompanies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCompanies'
type CompanyStorer_SelectCompanies_Call struct {
	*mock.Call
}

// SelectCompanies is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *CompanyStorer_Expecter) SelectCompanies(ctx interface{}, name interface{}) *CompanyStorer_SelectCompanies_Call {
	return &CompanyStorer_SelectCompanies_Call{Call: _e.mock.On("SelectCompanies", ctx, name)}
}

func (_c *CompanyStorer_SelectCompanies_Call) Run(run func(ctx context.Context, name string)) *CompanyStorer_SelectCompanies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CompanyStorer_SelectCompanies_Call) Return(_a0 []*model.Company, _a1 error) *CompanyStorer_SelectCompanies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CompanyStorer_SelectCompanies_Call) RunAndReturn(run func(context.Context, string) ([]*model.Company, error)) *CompanyStorer_SelectCompanies_Call {
	_c.Call.Return(run)
	return _c
}

// NewCompanyStorer creates a new instance of CompanyStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCompanyStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *CompanyStorer {
	mock := &CompanyStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.2. DO NOT EDIT.

// UsersStorer is an autogenerated mock type for the UsersStorer type
type UsersStorer struct {
	mock.Mock
}

type UsersStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersStorer) EXPECT() *UsersStorer_Expecter {
	return &UsersStorer_Expecter{mock: &_m.Mock}
}

// GetUserByEmail provides a mock function with given fields: _a0, _a1
func (_m *UsersStorer) GetUserByEmail(_a0 context.Context, _a1 string) (*model.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorer_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UsersStorer_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *UsersStorer_Expecter) GetUserByEmail(_a0 interface{}, _a1 interface{}) *UsersStorer_GetUserByEmail_Call {
	return &UsersStorer_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", _a0, _a1)}
}

func (_c *UsersStorer_GetUserByEmail_Call) Run(run func(_a0 context.Context, _a1 string)) *UsersStorer_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersStorer_GetUserByEmail_Call) Return(_a0 *model.User, _a1 error) *UsersStorer_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorer_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *UsersStorer_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UsersStorer) GetUserByID(ctx context.Context, id uuid.UUID) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorer_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UsersStorer_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UsersStorer_Expecter) GetUserByID(ctx interface{}, id interface{}) *UsersStorer_GetUserByID_Call {
	return &UsersStorer_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *UsersStorer_GetUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UsersStorer_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UsersStorer_GetUserByID_Call) Return(_a0 *model.User, _a1 error) *UsersStorer_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorer_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.User, error)) *UsersStorer_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByLogin provides a mock function with given fields: ctx, login
func (_m *UsersStorer) GetUserByLogin(ctx context.Context, login string) (*model.User, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorer_GetUserByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLogin'
type UsersStorer_GetUserByLogin_Call struct {
	*mock.Call
}

// GetUserByLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *UsersStorer_Expecter) GetUserByLogin(ctx interface{}, login interface{}) *UsersStorer_GetUserByLogin_Call {
	return &UsersStorer_GetUserByLogin_Call{Call: _e.mock.On("GetUserByLogin", ctx, login)}
}

func (_c *UsersStorer_GetUserByLogin_Call) Run(run func(ctx context.Context, login string)) *UsersStorer_GetUserByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersStorer_GetUserByLogin_Call) Return(_a0 *model.User, _a1 error) *UsersStorer_GetUserByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorer_GetUserByLogin_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *UsersStorer_GetUserByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmail provides a mock function with given fields: ctx, id, email
func (_m *UsersStorer) UpdateEmail(ctx context.Context, id uuid.UUID, email string) error {
	ret := _m.Called(ctx, id, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, id, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersStorer_UpdateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmail'
type UsersStorer_UpdateEmail_Call struct {
	*mock.Call
}

// UpdateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - email string
func (_e *UsersStorer_Expecter) UpdateEmail(ctx interface{}, id interface{}, email interface{}) *UsersStorer_UpdateEmail_Call {
	return &UsersStorer_UpdateEmail_Call{Call: _e.mock.On("UpdateEmail", ctx, id, email)}
}

func (_c *UsersStorer_UpdateEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, email string)) *UsersStorer_UpdateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *UsersStorer_UpdateEmail_Call) Return(_a0 error) *UsersStorer_UpdateEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersStorer_UpdateEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *UsersStorer_UpdateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: _a0, _a1, _a2
func (_m *UsersStorer) UpdatePassword(_a0 context.Context, _a1 uuid.UUID, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersStorer_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type UsersStorer_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
//   - _a2 string
func (_e *UsersStorer_Expecter) UpdatePassword(_a0 interface{}, _a1 interface{}, _a2 interface{}) *UsersStorer_UpdatePassword_Call {
	return &UsersStorer_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", _a0, _a1, _a2)}
}

func (_c *UsersStorer_UpdatePassword_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID, _a2 string)) *UsersStorer_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *UsersStorer_UpdatePassword_Call) Return(_a0 error) *UsersStorer_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersStorer_UpdatePassword_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *UsersStorer_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: _a0, _a1
func (_m *UsersStorer) Upsert(_a0 context.Context, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersStorer_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type UsersStorer_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *model.User
func (_e *UsersStorer_Expecter) Upsert(_a0 interface{}, _a1 interface{}) *UsersStorer_Upsert_Call {
	return &UsersStorer_Upsert_Call{Call: _e.mock.On("Upsert", _a0, _a1)}
}

func (_c *UsersStorer_Upsert_Call) Run(run func(_a0 context.Context, _a1 *model.User)) *UsersStorer_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *UsersStorer_Upsert_Call) Return(_a0 error) *UsersStorer_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersStorer_Upsert_Call) RunAndReturn(run func(context.Context, *model.User) error) *UsersStorer_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsersStorer creates a new instance of UsersStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersStorer {
	mock := &UsersStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
